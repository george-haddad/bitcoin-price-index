version: 2
jobs:
  test-lint:
    docker:
      - image: circleci/node:17.7.2
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      - run:
          name: 'Install npm modules'
          command: npm install
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - run:
          name: 'Run lint tests'
          command: npm run test:lint

  test-sitespeed:
    machine: true
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: 'Setup env variables'
          command: |
            echo 'export PR_NUMBER=${CIRCLE_PULL_REQUEST##*/}' >> $BASH_ENV
            echo 'export TSTAMP=$(date +"%F")' >> $BASH_ENV
            echo 'if [[ -z "${PR_NUMBER}" ]]; then export TARGET_URL="https://peaceful-kepler-549198.netlify.app"; else export TARGET_URL="https://deploy-preview-${PR_NUMBER}--peaceful-kepler-549198.netlify.app"; fi' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: 'Print env variables'
          command: |
            echo $PR_NUMBER
            echo $TSTAMP
            echo $TARGET_URL
      - run:
          name: 'Load linux module for traffic shaping'
          command: sudo modprobe ifb numifbs=1
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      - run:
          name: 'Install npm modules'
          command: npm install
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - run:
          name: 'Pull sitespeed.io docker'
          command: docker pull sitespeedio/sitespeed.io:15.4.0
      - run:
          name: 'Run sitespeed test with native speed'
          command: docker run --shm-size=1g --rm -v "$(pwd)":/sitespeed.io sitespeedio/sitespeed.io:15.4.0 --budget.configPath=sitespeed-budget.json --budget.output=json --budget.suppressExitCode=true --outputFolder=sitespeed-result/$TSTAMP/native "$TARGET_URL/"
      - run:
          name: 'Run sitespeed test on 3G network'
          command: docker run --shm-size=1g --cap-add=NET_ADMIN --rm -v "$(pwd)":/sitespeed.io sitespeedio/sitespeed.io:15.4.0 -c 3g --browsertime.connectivity.engine=throttle --budget.configPath=sitespeed-budget.json --budget.output=json --budget.suppressExitCode=true --outputFolder=sitespeed-result/$TSTAMP/3g "$TARGET_URL/"
      - run:
          name: 'Run sitespeed test on 3G Fast network'
          command: docker run --shm-size=1g --cap-add=NET_ADMIN --rm -v "$(pwd)":/sitespeed.io sitespeedio/sitespeed.io:15.4.0 -c 3gfast --browsertime.connectivity.engine=throttle --budget.configPath=sitespeed-budget.json --budget.output=json --budget.suppressExitCode=true --outputFolder=sitespeed-result/$TSTAMP/3gfast "$TARGET_URL/"
      - run:
          name: 'Run sitespeed unit tests'
          command: npm run test:sitespeed

  test-sslyze:
    docker:
      - image: circleci/python:3.7-node
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: 'Setup env variables'
          command: |
            echo 'export PR_NUMBER=${CIRCLE_PULL_REQUEST##*/}' >> $BASH_ENV
            echo 'if [[ -z "${PR_NUMBER}" ]]; then export TARGET_URL="peaceful-kepler-549198.netlify.app:443"; else export TARGET_URL="deploy-preview-${PR_NUMBER}--peaceful-kepler-549198.netlify.app:443"; fi' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: 'Print env variables'
          command: |
            echo $PR_NUMBER
            echo $TARGET_URL
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      - run:
          name: 'Install npm modules'
          command: npm install
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - run:
          name: 'Install setuptools'
          command: sudo pip install --upgrade setuptools
      - run:
          name: 'Install sslyze'
          command: sudo pip install --upgrade sslyze
      - run:
          name: 'Run sslyze'
          command: python -m sslyze --quiet $TARGET_URL --json_out=sslyze-report.json
      - run:
          name: 'Run SSL security unit tests'
          command: yarn test:sslyze

  test-zap:
    docker:
      - image: circleci/node:12.16
      - image: owasp/zap2docker-stable
        name: zap
        command: zap.sh -daemon -host 0.0.0.0 -port 8090 -config api.addrs.addr.name=.* -config api.addrs.addr.regex=true -config api.disablekey=true
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: 'Setup env variables'
          command: |
            echo 'export PR_NUMBER=${CIRCLE_PULL_REQUEST##*/}' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: 'Print env variables'
          command: |
            echo $PR_NUMBER
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      - run:
          name: 'Install npm modules'
          command: npm install
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - run:
          name: 'Run ZAP active and passive scans'
          command: npm run test:zap

workflows:
  version: 2
  performance-security-tests:
    jobs:
      - test-lint
      - test-sitespeed:
          requires:
            - test-lint
      - test-sslyze:
          requires:
            - test-sitespeed
      - test-zap:
          requires:
            - test-sslyze
